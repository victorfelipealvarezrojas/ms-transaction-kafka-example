server.port=0
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all

spring.kafka.producer.properties.delivery.timeout.ms=120000
spring.kafka.producer.properties.linger.ms=0
spring.kafka.producer.properties.request.timeout.ms=30000

spring.kafka.producer.properties.max.in.flight.requests.per.connection=5
spring.kafka.producer.properties.enable.idempotence=true

withdraw-money-topic=withdraw-money-topic
deposit-money-topic=deposit-money-topic

# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║ TRANSACCIONES EN KAFKA                                                       ║
# ║ Las transacciones permiten agrupar múltiples operaciones de                  ║
# ║ lectura/escritura como una unidad atómica que garantiza que todas            ║
# ║ las operaciones se completen con éxito o ninguna se realice.                 ║
# ║ Ejemplo: Si leemos de tópico A y escribimos en tópico B,                     ║
# ║ ambas operaciones se hacen como una sola unidad - si falla una,              ║
# ║ se revierten ambas (rollback).                                               ║
# ╚══════════════════════════════════════════════════════════════════════════════╝

# Esta propiedad define el prefijo para identificar las transacciones de Kafka.
# transfer-service: Nombre del servicio que está realizando la transacción
# ${random.value}: Genera un valor aleatorio para hacer único cada ID de transacción
# El guion (-) al final es un separador para el sufijo que Kafka agregará
# habilita la transacción y la identifica con un ID único, respecto al ID
# kafka espera que el ID sea único para cada instancia de la aplicación
spring.kafka.producer.transaction-id-prefix=transfer-service-${random.value}-

# Habilita el logging detallado (TRACE) para las transacciones de Kafka
# Útil para depuración - verás todos los eventos relacionados con transacciones
# como inicios, commits y rollbacks
logging.level.org.springframework.kafka.transaction=TRACE

# Habilita el logging detallado (TRACE) para las transacciones de Spring en general
# Muestra información sobre el manejo de transacciones a nivel de Spring
# Incluye eventos del gestor de transacciones, propagación, etc.
logging.level.org.springframework.transaction=TRACE

# Habilita el logging detallado (TRACE) para las transacciones de JPA / Hibernate
logging.level.org.springframework.orm.jpa.JpaTransactionManager=DEBUG

# Habilita el logging detallado (TRACE) para las transacciones de kafka
logging.level.org.springframework.kafka.transaction.KafkaTransactionManager=DEBUG

# JPA / Hibernate
#data base configuration
spring,.datasource.username                         =   root
spring.datasource.password                          =   root
spring.datasource.url                               =   jdbc:h2:mem:testdb
spring.datasource.driverClassName                   =   org.h2.Driver
spring.h2.console.enabled                           =   true